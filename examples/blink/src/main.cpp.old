
extern "C" {
#include "board.h"
#include <stdbool.h>
#include <stdio.h>
}
/*----------------------------------------------------------------------------
 *        Local definitions
 *----------------------------------------------------------------------------*/

/** IRQ priority for PIO (The lower the value, the greater the priority) */
#define IRQ_PRIOR_PIO 0

/** LED0 blink time, LED1 blink half this time, in ms */
#define BLINK_PERIOD 1000

/*----------------------------------------------------------------------------
 *        Local variables
 *----------------------------------------------------------------------------*/

/** LED0 blinking control. */
volatile bool bLed0Active = true;

/** LED1 blinking control. */
volatile bool bLed1Active = true;

/** Global timestamps in milliseconds since start of application */
volatile uint32_t dwTimeStamp = 0;

/** Global timestamps in milliseconds since start of application */
volatile uint32_t dwTcCounter = 0;

/*----------------------------------------------------------------------------
 *        Local functions
 *----------------------------------------------------------------------------*/

/**
 *  \brief Process Buttons Events
 *
 *  Change active states of LEDs when corresponding button events happened.
 */
static void ProcessButtonEvt(uint8_t ucButton) {
    if (ucButton == 0) {
        bLed0Active = !bLed0Active;
        if (!bLed0Active) {
            LED_Clear(0);
        }
    } else {
        bLed1Active = !bLed1Active;
#if 2 == LED_NUM
        /* Enable LED#2 and TC if they were disabled */
        if (bLed1Active) {
            LED_Set(1);
        }
        /* Disable LED#2 and TC if they were enabled */
        else {
            LED_Clear(1);
        }
#endif
    }
}

#ifndef NO_PUSHBUTTON
/**
 *  \brief Handler for Button 1 rising edge interrupt.
 *
 *  Handle process led1 status change.
 */
static void _Button1_Handler(const Pin* pPin) {
    if (pPin == &pinPB1) {
        ProcessButtonEvt(0);
    }
}

/**
 *  \brief Handler for Button 2 falling edge interrupt.
 *
 *  Handle process led2 status change.
 */
static void _Button2_Handler(const Pin* pPin) {
    if (pPin == &pinPB2) {
        ProcessButtonEvt(1);
    }
}

/**
 *  \brief Configure the Push-buttons
 *
 *  Configure the PIO as inputs and generate corresponding interrupt when
 *  pressed or released.
 */
static void _ConfigureButtons(void) {
    /* Configure PIO as inputs. */
    PIO_Configure(&pinPB1, 1);
    PIO_Configure(&pinPB2, 1);

    /* Adjust PIO denounce filter parameters, uses 10 Hz filter. */
    PIO_SetDebounceFilter(&pinPB1, 10);
    PIO_SetDebounceFilter(&pinPB2, 10);

    /* Initialize PIO interrupt handlers, see PIO definition in board.h. */
    PIO_ConfigureIt(&pinPB1, _Button1_Handler); /* Interrupt on rising edge  */
    PIO_ConfigureIt(&pinPB2, _Button2_Handler); /* Interrupt on rising edge */

    /* Enable PIO controller IRQs. */
    NVIC_EnableIRQ((IRQn_Type)pinPB1.id);
    NVIC_EnableIRQ((IRQn_Type)pinPB2.id);

    /* Enable PIO line interrupts. */
    PIO_EnableIt(&pinPB1);
    PIO_EnableIt(&pinPB2);
}

#else

/**
 *  \brief Handler for DBGU input.
 *
 *  Handle process LED1 or LED2 status change.
 */
static void _DBGU_Handler(void) {
    uint8_t key;

    if (!DBG_IsRxReady()) return;
    key = DBG_GetChar();
    switch (key) {
        case '1':
        case '2':
            ProcessButtonEvt(key - '1');
            break;
    }
}
#endif
/**
 *  \brief Configure LEDs
 *
 *  Configures LEDs \#1 and \#2 (cleared by default).
 */
static void _ConfigureLeds(void) {
    uint32_t i;

    for (i = 0; i < LED_NUM; i++) LED_Configure(i);
}

/**
 *  Interrupt handler for TC0 interrupt. Toggles the state of LED\#2.
 */
void TC0_Handler(void) {
    volatile uint32_t dummy;

    /* Clear status bit to acknowledge interrupt */
    dummy = TC0->TC_CHANNEL[0].TC_SR;

    /** Toggle LED state. */
    if (bLed1Active) {
#if 2 == LED_NUM
        LED_Toggle(1);
#endif
        printf("2 ");
    }
#ifdef NO_PUSHBUTTON
    _DBGU_Handler();
#endif
}

/**
 *  Configure Timer Counter 0 to generate an interrupt every 250ms.
 */
static void _ConfigureTc(void) {
    uint32_t div;
    uint32_t tcclks;

    /** Enable peripheral clock. */
    PMC_EnablePeripheral(ID_TC0);
    /** Configure TC for a 4Hz frequency and trigger on RC compare. */
    TC_FindMckDivisor(4, BOARD_MCK, &div, &tcclks, BOARD_MCK);

    TC_Configure(TC0, 0, tcclks | TC_CMR_CPCTRG);
    TC0->TC_CHANNEL[0].TC_RC = (BOARD_MCK / div) / 4;

    /* Configure and enable interrupt on RC compare */
    NVIC_ClearPendingIRQ(TC0_IRQn);
    NVIC_EnableIRQ(TC0_IRQn);

    TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;

    /** Start the counter if LED1 is enabled. */
    if (bLed1Active) {
        TC_Start(TC0, 0);
    }
}

/*----------------------------------------------------------------------------
 *        Exported functions
 *----------------------------------------------------------------------------*/
/**
 *  \brief getting-started Application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void) {
    /* Disable watchdog */
    WDT_Disable(WDT);

    /* Output example information */
    printf("\n\r-- Getting Started Example %s --\n\r", SOFTPACK_VERSION);
    printf("-- %s\n\r", BOARD_NAME);
    printf("-- Compiled: %s %s With %s--\n\r", __DATE__, __TIME__,
           COMPILER_NAME);

    /* Enable I and D cache */
    SCB_EnableICache();
    SCB_EnableDCache();

    /* Configure systick for 1 ms. */
    TimeTick_Configure();

    printf("Configure LED PIOs.\n\r");
    _ConfigureLeds();

    printf("Configure TC.\n\r");
    _ConfigureTc();

#ifndef NO_PUSHBUTTON
    printf("Configure buttons with denouncing.\n\r");
    _ConfigureButtons();
    printf("Press USRBP1 to Start/Stop LED D1 blinking.\n\r");
    printf("Press USRBP2 to Start/Stop LED D2 blinking.\n\r");
#else
    printf("No push buttons, uses DBG key 1 & 2 instead.\n\r");
    printf("Press 1 to Start/Stop LED D1 blinking.\n\r");
    printf("Press 2 to Start/Stop LED D2 blinking.\n\r");
#endif

    while (1) {
        /* Wait for LED to be active */
        while (!bLed0Active)
            ;

        /* Toggle LED state if active */
        if (bLed0Active) {
            LED_Toggle(0);
            printf("1 ");
        }

        /* Wait for 500ms */
        Wait(1000);
    }
}
